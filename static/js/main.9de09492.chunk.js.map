{"version":3,"sources":["components/FriendCard/Index.js","components/ShuffleFriends.js","components/Wrapper/Index.js","components/Header/Index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","key","id","alt","name","onClick","chooseFriend","src","image","ShuffleFriends","friends","sort","Math","random","slice","Fragment","map","friend","Index","occupation","location","Wrapper","children","Header","score","topScore","App","state","chosen","picked","_this","includes","alert","setState","push","console","log","Wrapper_Index","Header_Index","this","components_ShuffleFriends","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9de09492.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction FriendCard(props) {\r\n  return (\r\n    <div className=\"card\"key={props.id} id={props.id} alt={props.name}  onClick={() => props.chooseFriend(props.id) } >\r\n      <div className=\"img-container\">\r\n        <img src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendCard;","import React from \"react\";\r\nimport FriendCard from \"./FriendCard/Index\"\r\n\r\n\r\n\r\nfunction ShuffleFriends(props) {\r\n  const friends = props.friends.sort(() => .5 - Math.random()).slice(0, 8)\r\n  return (\r\n    <>\r\n      {friends.map(friend => (\r\n        <FriendCard\r\n          chooseFriend={props.chooseFriend}\r\n          id={friend.id}\r\n          key={friend.id}\r\n          name={friend.name}\r\n          image={friend.image}\r\n          occupation={friend.occupation}\r\n          location={friend.location}\r\n        />\r\n      ))};\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShuffleFriends;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header className=\"title\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <h1>Clicky Game</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <h2>Score: <span>{props.score}</span></h2>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <h2>Top Score: <span>{props.topScore}</span></h2>\r\n          </div>\r\n        </div>\r\n        <div className=\"row instructions\">\r\n          <div className=\"col-md-12\">\r\n            <p>Instructions: Click on the images below.  Be careful not to choose the same image twice.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport friends from \"./friends.json\"\nimport ShuffleFriends from \"./components/ShuffleFriends\"\nimport Wrapper from \"./components/Wrapper/Index\"\nimport Header from \"./components/Header/Index\"\n\nclass App extends Component {\n  state = {\n    chosen: [],\n    friends,\n    score: 0,\n    topScore: 0\n  }\n  chooseFriend = id => {\n    let picked = this.state.chosen\n    if (picked.includes(id)) {\n      alert(\"Already chosen\")\n      if (this.state.score > this.state.topScore) {\n        alert(\"New high score!!\")\n        this.setState({\n          topScore: this.state.score\n        })\n      }\n      this.setState({\n        score: 0,\n        chosen: []\n      })\n      return\n    }\n    picked.push(id)\n    this.setState({\n      chosen: picked,\n      score: (this.state.score + 1)\n    })\n    console.log(this.state.chosen)\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <ShuffleFriends\n          friends={this.state.friends}\n          chooseFriend={this.chooseFriend}\n          chosen={this.state.chosen}\n        />\n      </Wrapper >\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}